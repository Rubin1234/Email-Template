// public function process($mailVariable)
// {
// $matches = $this->getMatchedTemplateVariables();

// if ($matches && count($matches) > 0) {
// $this->templateVariables = $this->getParsedTemplateVariables($matches, $mailVariable);
// }

// $compiledString = $this->replaceKeysWithValues();
// // dd(11, $compiledString);
// }

// private function getMatchedTemplateVariables()
// {
// $regex = '/\[\w.+?\]/m';

// preg_match_all($regex, $this->templateBody, $matches, PREG_SET_ORDER);
// return $matches;
// }

// private function getParsedTemplateVariables($matches, $mailVariable)
// {


// $templateVariables = [];
// foreach ($matches as $match) {



// $mailVariable = $this->mailVariableRepository->where('variable_key', $match[0])->first();


// if ($mailVariable) {
// $templateVariables[$mailVariable->variable_key] = $this->getRealVariableValue($mailVariable->variable_key, $mailVariable->variable_value);
// }

// dd($templateVariables);
// }

// return $templateVariables;
// }
// private function getRealVariableValue($variableKey, $variableValue)
// {
// // if variable value not empty return it
// if ($variableValue) {
// return $variableValue;
// }
// // else look for this in the reserved variables below
// if (array_key_exists($variableKey, $this->reservedVariableKeys())) {
// return $this->reservedVariableKeys()[$variableKey];
// }
// // else if the variable key is a form input
// if (Str::contains($variableKey, "INPUT")) {
// return $this->getInputTypeVariable($variableKey, $variableValue);
// }
// // else if the key is a dynamic data variable
// if (Str::contains($variableKey, "DYNAMIC")) {
// return $this->getDynamicTypeVariable($variableKey, $variableValue);
// }
// // otherwise return the value as is
// return $variableValue;
// }

// private function replaceKeysWithValues()
// {
// $emailTemplateData = $this->repository->first();
// return str_replace(array_keys($this->templateVariables), array_values($this->templateVariables), $this->templateBody);
// }